{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-ada52539-b8ab-4284-8c4f-395a762e99b8",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Image Size Increase Due to Retained Package Lists\" vulnerability occurs when Docker images retain unnecessary package lists after installing software. This can lead to larger image sizes, which can increase the attack surface and slow down deployment times. In the context of JavaScript applications, this issue can arise when using Docker to containerize applications and failing to clean up package lists after installation.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to clean up package lists after installing packages in Docker images. This can be done by removing the package lists using `rm` commands or by using the `--no-install-recommends` option with `apt-get` to avoid installing unnecessary packages.\n\n### Source Code Fix Recommendation\n\nFor the specific vulnerability sink:\n\n```dockerfile\nRUN apt-get update && apt-get install -y --no-install-recommends netcat && \\\n    rm -rf /var/lib/apt/lists/*\n```\n\nThis fix involves adding the `--no-install-recommends` option to avoid installing recommended but unnecessary packages and removing the package lists after installation to reduce the image size.\n\n### Library Dependencies\n\nThe code example provided does not require any additional library dependencies to execute properly, as it is a Dockerfile command for managing system packages within a container.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-530: Exposure of Backup File to an Unauthorized Control Sphere](https://cwe.mitre.org/data/definitions/530.html)\n\nThese resources provide further information on best practices for securing Docker containers and understanding common security weaknesses."
              },
              "properties": {
                "tags": [
                  "resources.rules.remove-package-lists"
                ]
              }
            },
            {
              "id": "glog-65afe775-722c-47a1-8ba7-2f9c9cce00b0",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability described as \"Missing '--no-install-recommends' in 'apt-get install' command\" is not directly related to the JavaScript programming language itself but rather to the use of system package management within Dockerfiles or scripts that are part of a JavaScript application's deployment process. When using `apt-get install` without the `--no-install-recommends` flag, additional packages that are not strictly necessary for the application may be installed. This can lead to a larger attack surface, increased image size, and potentially more vulnerabilities due to the inclusion of unnecessary software.\n\n### General Mitigation Advice\n\nTo mitigate this issue, it is recommended to use the `--no-install-recommends` flag with the `apt-get install` command. This ensures that only the essential packages are installed, reducing the potential for vulnerabilities and minimizing the image size.\n\n### Source Code Fix Recommendation\n\nHere is the recommended fix for the given Dockerfile command:\n\n```dockerfile\nRUN apt-get update && apt-get install -y --no-install-recommends netcat\n```\n\n### Library Dependencies\n\nThe code example provided does not directly relate to JavaScript library dependencies, as it is a system-level command. However, if this command is part of a Dockerfile for a JavaScript application, ensure that all necessary JavaScript dependencies are listed in the `package.json` file and installed using a package manager like `npm` or `yarn`.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-732: Incorrect Permission Assignment for Critical Resource](https://cwe.mitre.org/data/definitions/732.html)\n\nThese resources provide further information on secure coding practices and common vulnerabilities."
              },
              "properties": {
                "tags": [
                  "resources.rules.missing-no-install-recommends"
                ]
              }
            },
            {
              "id": "glog-56cf459b-01a0-483b-a1b9-8a62255e5361",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Package Cache Retention Vulnerability\" in JavaScript refers to a security issue where sensitive data or outdated packages are retained in the cache, potentially leading to unauthorized access or execution of vulnerable code. This can occur when package managers or build tools cache dependencies without proper validation or expiration policies, allowing attackers to exploit outdated or malicious packages.\n\n### General Mitigation Advice\n\n1. **Regularly Update Dependencies**: Ensure that all dependencies are regularly updated to their latest versions to mitigate known vulnerabilities.\n2. **Use a Package Manager with Security Features**: Utilize package managers that offer security features such as integrity checks and vulnerability scanning.\n3. **Implement Cache Expiration Policies**: Configure your package manager to regularly clear and refresh the cache to prevent retention of outdated packages.\n4. **Monitor for Vulnerabilities**: Use tools to continuously monitor your dependencies for known vulnerabilities and apply patches promptly.\n\n### Source Code Fix Recommendation\n\nFor the specific vulnerability sink in the code example:\n\n```dockerfile\nRUN apt-get update && apt-get install -y netcat\n```\n\n**Recommendation**: Use a more secure method to install packages and ensure that the cache is cleared after installation to prevent retention of outdated packages.\n\n```dockerfile\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends netcat && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n```\n\n### Library Dependencies\n\nThe code example provided is a Dockerfile command and does not directly involve JavaScript libraries. However, if this were part of a larger JavaScript project, you would need to ensure that all JavaScript dependencies are properly managed and updated.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Dependency-Check](https://owasp.org/www-project-dependency-check/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-530: Exposure of Sensitive Information Through Cache](https://cwe.mitre.org/data/definitions/530.html)\n- [CWE-494: Download of Code Without Integrity Check](https://cwe.mitre.org/data/definitions/494.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.remove-package-cache"
                ]
              }
            },
            {
              "id": "glog-ad4f9975-7d52-46b3-8617-a399126a9d2f",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Container Privilege Escalation Vulnerability\" in the context of JavaScript applications typically refers to a scenario where an attacker can exploit misconfigurations or vulnerabilities within a containerized environment to gain elevated privileges. This can occur if the application running inside the container is not properly isolated or if it runs with excessive privileges, allowing an attacker to break out of the container and potentially access the host system.\n\nIn the case of a Node.js application with the command `CMD [ \"npm\", \"start\" ]`, the vulnerability might arise if the application is running as the root user inside the container. This can lead to privilege escalation if the application is compromised.\n\n### General Mitigation Advice\n\n1. **Run as Non-Root User**: Ensure that the application inside the container runs as a non-root user. This can be achieved by creating a user in the Dockerfile and switching to that user before running the application.\n\n2. **Use Minimal Base Images**: Use minimal base images to reduce the attack surface. Consider using images like `node:alpine` which are smaller and have fewer packages installed by default.\n\n3. **Apply Principle of Least Privilege**: Ensure that the container has only the necessary permissions and capabilities required to run the application.\n\n4. **Regularly Update Dependencies**: Keep all dependencies up to date to mitigate known vulnerabilities.\n\n5. **Use Security Tools**: Employ tools like Docker Bench for Security to audit your Docker containers and configurations.\n\n### Source Code Fix Recommendation\n\nModify the Dockerfile to run the application as a non-root user:\n\n```dockerfile\n# Use a minimal base image\nFROM node:alpine\n\n# Create a non-root user\nRUN addgroup -S appgroup && adduser -S appuser -G appgroup\n\n# Set the working directory\nWORKDIR /app\n\n# Copy package.json and install dependencies\nCOPY package.json ./\nRUN npm install\n\n# Copy the rest of the application code\nCOPY . .\n\n# Change ownership of the application files\nRUN chown -R appuser:appgroup /app\n\n# Switch to the non-root user\nUSER appuser\n\n# Start the application\nCMD [ \"npm\", \"start\" ]\n```\n\n### Library Dependencies\n\nTo execute the code example properly, the following dependencies are required:\n\n- Node.js\n- npm (Node Package Manager)\n\nEnsure that the `package.json` file includes all necessary dependencies for your application.\n\n### OWASP Resources\n\n- [OWASP Docker Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html)\n- [OWASP Node.js Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-250: Execution with Unnecessary Privileges](https://cwe.mitre.org/data/definitions/250.html)\n- [CWE-269: Improper Privilege Management](https://cwe.mitre.org/data/definitions/269.html)"
              },
              "properties": {
                "tags": [
                  "dockerfile.security.missing-user.missing-user"
                ]
              }
            },
            {
              "id": "glog-e8b0c584-d0ae-4df9-ae9b-8c51da5e14a4",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Sensitive Information Exposure Detected\" vulnerability occurs when sensitive data, such as passwords, API keys, or secret tokens, is inadvertently exposed in the source code. In JavaScript, this can happen when such information is hardcoded into the application, making it accessible to anyone who can view the source code. This exposure can lead to unauthorized access and potential data breaches.\n\n### Mitigation Advice\n\n1. **Environment Variables**: Store sensitive information in environment variables instead of hardcoding them in the source code.\n2. **Configuration Files**: Use configuration files that are not included in version control to store sensitive data.\n3. **Secrets Management Tools**: Utilize secrets management tools like AWS Secrets Manager, HashiCorp Vault, or Azure Key Vault to securely store and access sensitive information.\n4. **Access Controls**: Implement strict access controls to ensure only authorized personnel can access sensitive information.\n5. **Code Reviews**: Conduct regular code reviews to identify and remove any hardcoded sensitive information.\n\n### Source Code Fix Recommendation\n\nReplace the hardcoded secret with an environment variable:\n\n```javascript\n// Before\nconst secret = 'asddfilhpaf78h78032h780g780fg780asg780dsbovncubuyvqy';\n\n// After\nconst secret = process.env.SECRET_KEY;\n```\n\nEnsure that the environment variable `SECRET_KEY` is set in your deployment environment.\n\n### Library Dependencies\n\nThe code example provided does not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten: A6:2017-Security Misconfiguration](https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-200: Exposure of Sensitive Information to an Unauthorized Actor](https://cwe.mitre.org/data/definitions/200.html)"
              },
              "properties": {
                "tags": [
                  "generic.secrets.security.detected-generic-secret.detected-generic-secret"
                ]
              }
            },
            {
              "id": "glog-8fd24791-20a3-4328-94ff-f3b101088356",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Container Privilege Escalation Vulnerability\" in the context of JavaScript applications typically refers to a situation where an application running inside a container (such as a Docker container) can exploit misconfigurations or vulnerabilities to gain elevated privileges. This can occur if the container is run with excessive privileges or if the application can execute commands that affect the host system.\n\nIn JavaScript applications, this vulnerability can manifest when using Node.js applications that execute shell commands or scripts without proper validation or sanitization. The use of `CMD [ \"npm\", \"start\" ]` in a Dockerfile can be a potential sink if the application being started has vulnerabilities that allow for command injection or if the container is not properly isolated.\n\n### General Mitigation Advice\n\n1. **Least Privilege**: Run containers with the least privileges necessary. Avoid using the `--privileged` flag and minimize the use of `CAP_SYS_ADMIN` and other capabilities.\n   \n2. **User Permissions**: Do not run applications as the root user inside the container. Use a non-root user with limited permissions.\n\n3. **Input Validation**: Ensure that any input that could be used in shell commands is properly validated and sanitized to prevent command injection.\n\n4. **Update Dependencies**: Regularly update your application dependencies to patch known vulnerabilities.\n\n5. **Security Context**: Use Docker security options to limit the container's capabilities and access to the host system.\n\n6. **Network Policies**: Implement network policies to restrict the container's network access.\n\n### Source Code Fix Recommendation\n\nTo mitigate the risk of privilege escalation, ensure that your Dockerfile and application code adhere to best practices:\n\n```dockerfile\n# Use a non-root user\nFROM node:14\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nUSER node\nCMD [ \"npm\", \"start\" ]\n```\n\nIn your Node.js application, avoid using shell commands directly. If necessary, use libraries like `child_process` with caution and ensure inputs are sanitized.\n\n### Library Dependencies\n\nTo execute the code example properly, the following dependencies are typically required:\n\n- Node.js (version 14 or compatible)\n- npm (Node Package Manager)\n\nEnsure that your `package.json` file lists all necessary dependencies for your application.\n\n### OWASP Resources\n\n- [OWASP Docker Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html)\n- [OWASP Node.js Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-250: Execution with Unnecessary Privileges](https://cwe.mitre.org/data/definitions/250.html)\n- [CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')](https://cwe.mitre.org/data/definitions/78.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.missing-user"
                ]
              }
            },
            {
              "id": "glog-bc3fbe47-ba10-43bb-a0d7-a66f96747e33",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Credential Exposure in URI\" vulnerability occurs when sensitive information, such as database credentials, is embedded directly in a URI. This can lead to unauthorized access if the URI is logged, shared, or exposed in any way. In JavaScript applications, this is particularly risky when using environment variables or configuration files that might be inadvertently exposed.\n\n### General Mitigation Advice\n\n1. **Environment Variables**: Store sensitive information like database credentials in environment variables instead of hardcoding them in the source code.\n2. **Configuration Files**: Use configuration files that are not included in version control (e.g., `.gitignore` them) to store sensitive information.\n3. **Secrets Management**: Utilize secrets management tools or services to securely store and access sensitive information.\n4. **Access Control**: Ensure that only authorized personnel have access to sensitive configuration files and environment variables.\n5. **Logging**: Avoid logging URIs that contain sensitive information.\n\n### Source Code Fix Recommendation\n\nInstead of hardcoding the database URI, use environment variables to store sensitive information. Here's how you can modify the code:\n\n```javascript\n// Load environment variables\nrequire('dotenv').config();\n\n// Use environment variables for sensitive information\nconst server = `postgres://${process.env.DB_USER}:${process.env.DB_PASSWORD}@${process.env.DB_HOST}`;\n\n// Example usage\nconsole.log(`Connecting to database at ${server}`);\n```\n\n### Library Dependencies\n\nTo execute the above code properly, you need the following library:\n\n- `dotenv`: This library is used to load environment variables from a `.env` file into `process.env`.\n\nYou can install it using npm:\n\n```bash\nnpm install dotenv\n```\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-200: Exposure of Sensitive Information to an Unauthorized Actor](https://cwe.mitre.org/data/definitions/200.html)\n- [CWE-522: Insufficiently Protected Credentials](https://cwe.mitre.org/data/definitions/522.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.detected-username-and-password-in-uri"
                ]
              }
            },
            {
              "id": "glog-6ad068e1-db66-41b0-9371-dfda73db633a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Sensitive Information Exposure Detected\" vulnerability occurs when sensitive data, such as passwords, API keys, or secret tokens, is inadvertently exposed in the source code. In JavaScript, this can happen when such information is hardcoded into the application, making it accessible to anyone who can view the source code. This exposure can lead to unauthorized access and potential data breaches.\n\n### Mitigation Advice\n\n1. **Environment Variables**: Store sensitive information in environment variables instead of hardcoding them in the source code.\n2. **Configuration Files**: Use configuration files that are not included in version control to store sensitive data.\n3. **Secrets Management Tools**: Utilize secrets management tools like AWS Secrets Manager, HashiCorp Vault, or Azure Key Vault to securely store and access sensitive information.\n4. **Access Controls**: Implement strict access controls to ensure only authorized personnel can access sensitive information.\n5. **Code Reviews**: Conduct regular code reviews to identify and remove any hardcoded sensitive information.\n\n### Source Code Fix Recommendation\n\nReplace the hardcoded secret with an environment variable:\n\n```javascript\n// Before\nconst secret = 'asddfilhpaf78h78032h780g780fg780asg780dsbovncubuyvqy';\n\n// After\nconst secret = process.env.SECRET_KEY;\n```\n\nEnsure that the environment variable `SECRET_KEY` is set in your deployment environment.\n\n### Library Dependencies\n\nThe code example provided does not require any additional library dependencies to execute properly.\n\n### OWASP Resources\n\n- [OWASP Top Ten: A6:2017-Security Misconfiguration](https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-200: Exposure of Sensitive Information to an Unauthorized Actor](https://cwe.mitre.org/data/definitions/200.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.detected-generic-secret"
                ]
              }
            },
            {
              "id": "glog-13c3447a-9edd-4d19-9def-0023a20ff4c2",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Cryptographically Weak RNG Vulnerability\" in JavaScript arises when a non-cryptographic random number generator (RNG) is used in security-sensitive contexts. JavaScript's `Math.random()` function is a common source of this vulnerability because it is not designed to be cryptographically secure. It produces pseudo-random numbers that can be predictable, making it unsuitable for tasks such as generating tokens, passwords, or any other security-related data.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure RNG. In JavaScript, you can use the `crypto` module available in Node.js or the `window.crypto` object in browsers to generate secure random numbers.\n\n### Source Code Fix Recommendation\n\nReplace the use of `Math.random()` with a cryptographically secure alternative. Here's how you can modify the code to use `crypto.randomInt()` in Node.js:\n\n```javascript\nconst crypto = require('crypto');\n\ncrypto.randomInt(0, 100, (err, price) => {\n  if (err) throw err;\n  console.log(`Price: ${price}`);\n});\n```\n\nFor browser environments, you can use:\n\n```javascript\nconst array = new Uint32Array(1);\nwindow.crypto.getRandomValues(array);\nconst price = array[0] % 100;\nconsole.log(`Price: ${price}`);\n```\n\n### Library Dependencies\n\nFor the Node.js example, the `crypto` module is a built-in module and does not require additional installation. For the browser example, no additional libraries are required as `window.crypto` is a built-in object.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [OWASP Top Ten 2021](https://owasp.org/Top10/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_insecure_random_generator"
                ]
              }
            },
            {
              "id": "glog-657e8ae5-e06a-4957-ab83-5e5acce14478",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Cryptographically Weak RNG Vulnerability\" in JavaScript arises when a non-cryptographic random number generator (RNG) is used in security-sensitive contexts. JavaScript's `Math.random()` function is a common source of this vulnerability because it is not designed to be cryptographically secure. It produces pseudo-random numbers that can be predictable, making it unsuitable for tasks such as generating tokens, passwords, or any other security-related data.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure RNG. In JavaScript, you can use the `crypto` module available in Node.js or the `window.crypto` object in browsers to generate secure random numbers.\n\n### Source Code Fix Recommendation\n\nReplace the use of `Math.random()` with a cryptographically secure alternative. Here's how you can modify the code to use `crypto.randomInt()` in Node.js:\n\n```javascript\nconst crypto = require('crypto');\n\ncrypto.randomInt(0, 100, (err, price) => {\n  if (err) throw err;\n  console.log(`Price: ${price}`);\n});\n```\n\nFor browser environments, you can use:\n\n```javascript\nconst array = new Uint32Array(1);\nwindow.crypto.getRandomValues(array);\nconst price = array[0] % 100;\nconsole.log(`Price: ${price}`);\n```\n\n### Library Dependencies\n\nFor the Node.js example, the `crypto` module is a built-in module and does not require additional installation. For the browser example, no additional libraries are required as `window.crypto` is a built-in object.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [OWASP Top Ten 2021](https://owasp.org/Top10/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_insecure_random_generator"
                ]
              }
            },
            {
              "id": "glog-b9ba5aff-d846-4e5d-83cc-5d0f5a26db35",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Credential Exposure in URI\" vulnerability occurs when sensitive information, such as database credentials, is embedded directly in a URI. This can lead to unauthorized access if the URI is logged, shared, or exposed in any way. In JavaScript applications, this is particularly risky as URIs might be included in client-side code, configuration files, or logs, making them accessible to unintended parties.\n\n### General Mitigation Advice\n\n1. **Environment Variables**: Store sensitive information like database credentials in environment variables instead of hardcoding them in the source code.\n2. **Configuration Files**: Use configuration files that are not included in version control systems to store sensitive information.\n3. **Secrets Management**: Utilize secrets management tools or services to securely store and access sensitive information.\n4. **Access Controls**: Implement strict access controls to ensure that only authorized users and services can access sensitive information.\n5. **Logging Practices**: Avoid logging sensitive information. If logging is necessary, ensure that logs are properly secured and access is restricted.\n\n### Source Code Fix Recommendation\n\nInstead of embedding the credentials directly in the URI, use environment variables to store and access them securely. Here's how you can modify the code:\n\n```javascript\n// Load environment variables\nrequire('dotenv').config();\n\n// Use environment variables for sensitive information\nconst server = `postgres://${process.env.DB_USER}:${process.env.DB_PASSWORD}@${process.env.DB_HOST}`;\n\n// Example usage\nconsole.log(`Connecting to server: ${server}`);\n```\n\n### Library Dependencies\n\nTo execute the code example properly, you need the following library:\n\n- `dotenv`: This library is used to load environment variables from a `.env` file into `process.env`.\n\nYou can install it using npm:\n\n```bash\nnpm install dotenv\n```\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-200: Exposure of Sensitive Information to an Unauthorized Actor](https://cwe.mitre.org/data/definitions/200.html)\n- [CWE-522: Insufficiently Protected Credentials](https://cwe.mitre.org/data/definitions/522.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.detected-username-and-password-in-uri"
                ]
              }
            },
            {
              "id": "glog-fdcc1b77-15eb-49fb-951f-e33692ced627",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Cryptographically Weak RNG Vulnerability\" in JavaScript arises when a non-cryptographic random number generator (RNG) is used in security-sensitive contexts. JavaScript's `Math.random()` function is a common source of this vulnerability because it is not designed to be cryptographically secure. It produces pseudo-random numbers that can be predictable, making it unsuitable for tasks such as generating tokens, passwords, or any other security-related data.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure RNG. In JavaScript, you can use the `crypto` module available in Node.js or the `window.crypto` object in browsers to generate secure random numbers.\n\n### Source Code Fix Recommendation\n\nReplace the use of `Math.random()` with a cryptographically secure alternative. Here's how you can modify the code to use `crypto.randomInt()` in Node.js:\n\n```javascript\nconst crypto = require('crypto');\n\ncrypto.randomInt(0, 100, (err, price) => {\n  if (err) throw err;\n  console.log(`Price: ${price}`);\n});\n```\n\nFor browser environments, you can use:\n\n```javascript\nconst array = new Uint32Array(1);\nwindow.crypto.getRandomValues(array);\nconst price = array[0] % 100;\nconsole.log(`Price: ${price}`);\n```\n\n### Library Dependencies\n\nFor the Node.js example, the `crypto` module is a built-in module and does not require additional installation. For the browser example, no additional libraries are required as `window.crypto` is a built-in object.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [OWASP Top Ten 2021](https://owasp.org/Top10/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_insecure_random_generator"
                ]
              }
            },
            {
              "id": "glog-736afa53-c4cf-41c4-9b70-7548e01abea7",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Cryptographically Weak RNG Vulnerability\" in JavaScript arises when a non-cryptographic random number generator (RNG) is used in security-sensitive contexts. JavaScript's `Math.random()` function is a common source of this vulnerability because it is not designed to be cryptographically secure. It produces pseudo-random numbers that can be predictable, making it unsuitable for tasks such as generating tokens, passwords, or any other security-related data.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure RNG. In JavaScript, you can use the `crypto` module available in Node.js or the `window.crypto` object in browsers to generate secure random numbers.\n\n### Source Code Fix Recommendation\n\nReplace the use of `Math.random()` with a cryptographically secure alternative. Here's how you can modify the code to use `crypto.randomInt()` in Node.js:\n\n```javascript\nconst crypto = require('crypto');\n\ncrypto.randomInt(0, 100, (err, price) => {\n  if (err) throw err;\n  console.log(`Price: ${price}`);\n});\n```\n\nFor browser environments, you can use:\n\n```javascript\nconst array = new Uint32Array(1);\nwindow.crypto.getRandomValues(array);\nconst price = array[0] % 100;\nconsole.log(`Price: ${price}`);\n```\n\n### Library Dependencies\n\nFor the Node.js example, the `crypto` module is a built-in module and does not require additional installation. For the browser example, no additional libraries are required as `window.crypto` is a built-in object.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [OWASP Top Ten 2021](https://owasp.org/Top10/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_insecure_random_generator"
                ]
              }
            },
            {
              "id": "glog-416fbc1a-df15-4c91-9f9e-28ceccfb9a0c",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Cryptographically Weak RNG Vulnerability\" in JavaScript arises when a non-cryptographic random number generator (RNG) is used in security-sensitive contexts. JavaScript's `Math.random()` function is a common source of this vulnerability because it is not designed to be cryptographically secure. It produces pseudo-random numbers that can be predictable, making it unsuitable for tasks such as generating tokens, passwords, or any other security-related data.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure RNG. In JavaScript, you can use the `crypto` module available in Node.js or the `window.crypto` object in browsers to generate secure random numbers.\n\n### Source Code Fix Recommendation\n\nReplace the use of `Math.random()` with a cryptographically secure alternative. Here's how you can modify the code to use `crypto.randomInt()` in Node.js:\n\n```javascript\nconst crypto = require('crypto');\n\ncrypto.randomInt(0, 100, (err, price) => {\n  if (err) throw err;\n  console.log(`Price: ${price}`);\n});\n```\n\nFor browser environments, you can use:\n\n```javascript\nconst array = new Uint32Array(1);\nwindow.crypto.getRandomValues(array);\nconst price = array[0] % 100;\nconsole.log(`Price: ${price}`);\n```\n\n### Library Dependencies\n\nFor the Node.js example, the `crypto` module is a built-in module and does not require additional installation. For the browser example, no additional libraries are required as `window.crypto` is a built-in object.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [OWASP Top Ten 2021](https://owasp.org/Top10/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_insecure_random_generator"
                ]
              }
            },
            {
              "id": "glog-118fadec-3ca8-4cf3-8768-023e990d0ba8",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Cryptographically Weak RNG Vulnerability\" in JavaScript arises when a non-cryptographic random number generator (RNG) is used in security-sensitive contexts. JavaScript's `Math.random()` function is a common source of this vulnerability because it is not designed to be cryptographically secure. It produces pseudo-random numbers that can be predictable, making it unsuitable for tasks such as generating tokens, passwords, or any other security-related data.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographically secure RNG. In JavaScript, you can use the `crypto` module available in Node.js or the `window.crypto` object in browsers to generate secure random numbers.\n\n### Source Code Fix Recommendation\n\nReplace the use of `Math.random()` with a cryptographically secure alternative. Here's how you can modify the code to use `crypto.randomInt()` in Node.js:\n\n```javascript\nconst crypto = require('crypto');\n\ncrypto.randomInt(0, 100, (err, price) => {\n  if (err) throw err;\n  console.log(`Price: ${price}`);\n});\n```\n\nFor browser environments, you can use:\n\n```javascript\nconst array = new Uint32Array(1);\nwindow.crypto.getRandomValues(array);\nconst price = array[0] % 100;\nconsole.log(`Price: ${price}`);\n```\n\n### Library Dependencies\n\nFor the Node.js example, the `crypto` module is a built-in module and does not require additional installation. For the browser example, no additional libraries are required as `window.crypto` is a built-in object.\n\n### OWASP Resources\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [OWASP Top Ten 2021](https://owasp.org/Top10/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_insecure_random_generator"
                ]
              }
            },
            {
              "id": "glog-cf504862-aaec-40ff-8c2d-6b4a3c639b38",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"XSS vulnerability from user-controlled HTML data\" refers to a security flaw where an attacker can inject malicious scripts into web pages viewed by other users. This occurs when user input is not properly sanitized and is directly included in the HTML content. In JavaScript, this can lead to unauthorized actions being performed on behalf of the user, data theft, or other malicious activities.\n\nIn the provided code example, the SQL query is constructed using string concatenation with user inputs `username` and `password`. This approach is vulnerable to SQL Injection, which is a separate but related issue. However, if these inputs are used in a web context without proper sanitization, they could also lead to XSS vulnerabilities.\n\n### General Mitigation Advice\n\n1. **Input Validation and Sanitization**: Always validate and sanitize user inputs. Use libraries or frameworks that automatically handle this for you.\n2. **Use Prepared Statements**: For SQL queries, use prepared statements or parameterized queries to prevent SQL Injection.\n3. **Escape Output**: Ensure that any data rendered in HTML is properly escaped to prevent XSS.\n4. **Content Security Policy (CSP)**: Implement CSP headers to restrict the sources from which scripts can be loaded.\n5. **Use Security Libraries**: Utilize libraries that help in preventing XSS, such as DOMPurify for sanitizing HTML.\n\n### Source Code Fix Recommendation\n\nTo fix the SQL Injection vulnerability in the provided code, use prepared statements. Here's an example using a hypothetical database library:\n\n```javascript\n// Assuming a database library that supports prepared statements\nvar query = \"SELECT * FROM users WHERE name = ? AND password = ?\";\ndatabase.execute(query, [username, password], function(err, results) {\n    if (err) {\n        // Handle error\n    } else {\n        // Process results\n    }\n});\n```\n\n### Library Dependencies\n\nThe code example requires a database library that supports prepared statements. The specific library will depend on the database being used (e.g., `mysql`, `pg` for PostgreSQL, etc.).\n\n### OWASP Resources\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP SQL Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-5d984683-172a-44b0-90eb-826e413e067e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"XSS Vulnerability from User-Controlled HTML Data\" refers to a security flaw where an attacker can inject malicious scripts into web pages viewed by other users. This vulnerability arises when user input is not properly sanitized and is directly inserted into HTML content, allowing attackers to execute arbitrary JavaScript code in the context of other users' browsers. In JavaScript applications, this can lead to unauthorized actions, data theft, and other malicious activities.\n\n### General Mitigation Advice\n\n1. **Input Validation and Sanitization**: Always validate and sanitize user inputs. Use libraries or frameworks that automatically escape HTML entities.\n2. **Content Security Policy (CSP)**: Implement a strong CSP to restrict the sources from which scripts can be executed.\n3. **Use Secure JavaScript Libraries**: Utilize libraries that are designed to handle user input securely.\n4. **Avoid Inline JavaScript**: Refrain from using inline JavaScript and dynamically generated scripts.\n\n### Source Code Fix Recommendation\n\nThe provided code example is vulnerable to SQL Injection rather than XSS. However, to address the potential SQL Injection vulnerability, you should use parameterized queries or prepared statements. Here's a revised version of the code:\n\n```javascript\n// Assuming the use of a library like 'mysql' for database operations\nvar mysql = require('mysql');\nvar connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'user',\n  password: 'password',\n  database: 'database'\n});\n\nvar query = 'SELECT * FROM products WHERE id = ?';\nconnection.query(query, [product_id], function (error, results, fields) {\n  if (error) throw error;\n  // Process results\n});\n```\n\n### Library Dependencies\n\nTo execute the code example properly, the following library is required:\n\n- `mysql`: A Node.js driver for MySQL.\n\n### OWASP Resources\n\n- [OWASP Cross-Site Scripting (XSS) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-f54fb671-f70e-4c66-a428-3c55cc837776",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"XSS vulnerability from user-controlled HTML data\" refers to a security flaw where an attacker can inject malicious scripts into web pages viewed by other users. This vulnerability arises when user input is not properly sanitized and is directly included in HTML content, allowing attackers to execute arbitrary JavaScript in the context of other users' browsers. In JavaScript applications, this can lead to data theft, session hijacking, and other malicious activities.\n\n### General Mitigation Advice\n\n1. **Input Validation and Sanitization**: Always validate and sanitize user inputs. Use libraries or frameworks that automatically handle input sanitization.\n2. **Output Encoding**: Encode data before rendering it in the browser to prevent execution of injected scripts.\n3. **Content Security Policy (CSP)**: Implement CSP headers to restrict the sources from which scripts can be loaded and executed.\n4. **Use Security Libraries**: Utilize libraries that provide built-in protection against XSS attacks.\n\n### Source Code Fix Recommendation\n\nThe provided code snippet is vulnerable to SQL Injection rather than XSS, as it directly concatenates user input into an SQL query. To mitigate this, use parameterized queries or prepared statements to safely include user input in SQL queries.\n\n```javascript\n// Example using a parameterized query with a library like pg-promise\nconst pgp = require('pg-promise')();\nconst db = pgp(connectionString);\n\nconst query = 'SELECT * FROM products WHERE name ILIKE $1 OR description ILIKE $1';\ndb.any(query, [`%${userInput}%`])\n  .then(data => {\n    console.log(data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n### Library Dependencies\n\nTo execute the code example properly, the following library dependencies are required:\n\n- `pg-promise`: A library for PostgreSQL database interaction in Node.js.\n\n### OWASP Resources\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP SQL Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-b7c23f52-066c-4b71-81d1-73e39c68ace5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"XSS Vulnerability from User-Controlled HTML Data\" refers to a security flaw where an attacker can inject malicious scripts into web applications by exploiting user-controlled input fields. In JavaScript, this often occurs when user input is not properly sanitized and is directly inserted into HTML or JavaScript code, leading to Cross-Site Scripting (XSS) attacks. This can allow attackers to execute arbitrary scripts in the context of the user's browser session, potentially leading to data theft, session hijacking, or other malicious activities.\n\n### General Mitigation Advice\n\n1. **Input Validation and Sanitization**: Always validate and sanitize user inputs. Use libraries or frameworks that automatically handle input sanitization.\n2. **Output Encoding**: Encode data before rendering it in the browser to prevent execution of malicious scripts.\n3. **Content Security Policy (CSP)**: Implement CSP headers to restrict the sources from which scripts can be loaded.\n4. **Use Security Libraries**: Utilize libraries that provide built-in protection against XSS attacks.\n\n### Source Code Fix Recommendation\n\nThe provided code snippet is vulnerable to SQL Injection rather than XSS. However, to address the potential SQL Injection vulnerability, use parameterized queries or prepared statements to prevent attackers from injecting malicious SQL code.\n\n```javascript\n// Assuming use of a library like 'pg' for PostgreSQL\nconst { Client } = require('pg');\nconst client = new Client();\n\nasync function insertPurchase(cart) {\n    const query = `\n        INSERT INTO purchases(mail, product_name, user_name, product_id, address, phone, ship_date, price)\n        VALUES($1, $2, $3, $4, $5, $6, $7, $8);\n    `;\n    const values = [\n        cart.mail,\n        cart.product_name,\n        cart.username,\n        cart.product_id,\n        cart.address,\n        cart.phone,\n        cart.ship_date,\n        cart.price\n    ];\n\n    try {\n        await client.connect();\n        await client.query(query, values);\n    } finally {\n        await client.end();\n    }\n}\n```\n\n### Library Dependencies\n\nTo execute the code example properly, the following library is required:\n\n- `pg`: A PostgreSQL client for Node.js.\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP SQL Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-fb9ba6e7-6937-4310-ba39-8d9fffa09ab7",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"XSS vulnerability from user-controlled HTML data\" refers to a security flaw where an attacker can inject malicious scripts into web pages viewed by other users. This vulnerability arises when user input is not properly sanitized and is directly inserted into HTML content, allowing attackers to execute arbitrary JavaScript code in the context of other users' browsers. In JavaScript applications, this can lead to unauthorized actions, data theft, and other malicious activities.\n\n### General Mitigation Advice\n\n1. **Input Validation and Sanitization**: Always validate and sanitize user inputs. Use libraries or frameworks that automatically handle input sanitization.\n2. **Output Encoding**: Encode data before rendering it in the browser to prevent execution of malicious scripts.\n3. **Content Security Policy (CSP)**: Implement CSP headers to restrict the sources from which scripts can be loaded and executed.\n4. **Use Security Libraries**: Utilize libraries that provide security features, such as DOMPurify for sanitizing HTML.\n\n### Source Code Fix Recommendation\n\nThe provided code example is vulnerable to SQL Injection, not XSS. However, to address the SQL Injection vulnerability, use parameterized queries or prepared statements to prevent attackers from injecting malicious SQL code.\n\n```javascript\n// Example using a parameterized query\nvar q = \"SELECT * FROM purchases WHERE user_name = ?\";\ndatabase.query(q, [username], function(err, results) {\n    if (err) {\n        // Handle error\n    } else {\n        // Process results\n    }\n});\n```\n\n### Library Dependencies\n\nTo execute the code example properly, you may need the following library dependencies:\n\n- A database client library, such as `mysql` or `pg` for Node.js, depending on the database being used.\n\n### OWASP Resources\n\n- [OWASP Cross-Site Scripting (XSS) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-a8dbc748-e11e-4d00-9079-3ee9dc721de5",
              "help": {
                "text": "",
                "markdown": "### Description\n\nAn \"Open Redirect Vulnerability\" occurs when an application accepts untrusted input that could cause the web application to redirect the request to a URL contained within untrusted input. This can be exploited by attackers to redirect users to malicious sites, potentially leading to phishing attacks or other malicious activities.\n\nIn the provided JavaScript code, the `returnurl` parameter is taken directly from the request body and used in a redirect without any validation or sanitization. This makes the application vulnerable to open redirect attacks.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Ensure that the `returnurl` parameter is validated against a whitelist of allowed URLs or paths.\n2. **Sanitize Input**: Remove any potentially harmful characters or patterns from the input.\n3. **Use Relative URLs**: Prefer using relative URLs for redirects to avoid redirecting to external sites.\n4. **Implement Security Headers**: Use security headers like `Content-Security-Policy` to mitigate the impact of open redirects.\n\n### Source Code Fix Recommendation\n\nTo mitigate the open redirect vulnerability in the provided code, you can implement a whitelist of allowed URLs and validate the `returnurl` against this list:\n\n```javascript\nvar returnurl = req.body.returnurl;\nvar allowedUrls = [\"/\", \"/home\", \"/dashboard\"]; // Define allowed URLs\n\nlogger.error(\"Tried to login attempt from user = \" + user);\n\nauth(user, password)\n    .then(function (data) {\n        req.session.logged = true;\n        req.session.user_name = user;\n\n        if (!returnurl || !allowedUrls.includes(returnurl)) {\n            returnurl = \"/\";\n        }\n\n        res.redirect(returnurl);\n    })\n    .catch(function (err) {\n        res.redirect(\"/login?returnurl=\" + encodeURIComponent(returnurl) + \"&error=\" + encodeURIComponent(err.message));\n    });\n```\n\n### Library Dependencies\n\nThe code example requires the following libraries to execute properly:\n\n- `express`: For handling HTTP requests and responses.\n- `express-session`: For managing user sessions.\n- `body-parser`: For parsing request bodies.\n- `winston` or another logging library: For logging errors.\n\n### OWASP Resources\n\n- [OWASP Cheat Sheet: Unvalidated Redirects and Forwards](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.express_open_redirect"
                ]
              }
            },
            {
              "id": "glog-9dfc4027-7dce-4da8-9b7c-17188bde2b17",
              "help": {
                "text": "",
                "markdown": "### Description\n\nAn **Open Redirect Vulnerability** occurs when a web application accepts untrusted input that could cause the web application to redirect the request to a URL contained within untrusted input. This can be exploited by attackers to redirect users to malicious sites, potentially leading to phishing attacks or other malicious activities. In JavaScript, this vulnerability can manifest when using functions like `res.redirect()` in Node.js applications without proper validation of the input URL.\n\n### Mitigation Advice\n\nTo mitigate open redirect vulnerabilities, you should:\n\n1. **Validate Input**: Ensure that the URL being redirected to is validated against a whitelist of allowed domains.\n2. **Use Relative URLs**: Prefer using relative URLs for redirects whenever possible.\n3. **Sanitize Input**: Use libraries or functions to sanitize and validate URLs.\n4. **Log Redirects**: Keep logs of all redirects for monitoring and auditing purposes.\n\n### Source Code Fix Recommendation\n\nGiven the vulnerable code snippet:\n\n```javascript\nres.redirect(returnurl);\n```\n\nA more secure implementation would involve validating the `returnurl` before performing the redirect:\n\n```javascript\nconst allowedDomains = ['example.com', 'anotherexample.com'];\n\nfunction isValidRedirectUrl(url) {\n    try {\n        const parsedUrl = new URL(url);\n        return allowedDomains.includes(parsedUrl.hostname);\n    } catch (e) {\n        return false;\n    }\n}\n\nif (isValidRedirectUrl(returnurl)) {\n    res.redirect(returnurl);\n} else {\n    res.status(400).send('Invalid redirect URL');\n}\n```\n\n### Library Dependencies\n\nThe above code example requires the following Node.js standard library:\n\n- `url` (part of Node.js core library, no additional installation required)\n\n### OWASP Resources\n\n- [OWASP Top Ten: A10 -2021: Server-Side Request Forgery (SSRF)](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/)\n- [OWASP Cheat Sheet: Input Validation](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.express-open-redirect.express-open-redirect"
                ]
              }
            },
            {
              "id": "glog-9fcf275f-1ab3-41f5-8921-9fa74c42a738",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Open Redirect Vulnerability in redirect() Function\" occurs when an application accepts untrusted input that could cause the web application to redirect the request to a URL contained within untrusted input. This can be exploited by attackers to redirect users to malicious sites, potentially leading to phishing attacks or other malicious activities.\n\nIn the provided code example, the `res.redirect(\"/login?returnurl=\" + req.url);` line is vulnerable because it directly uses `req.url` without validation or sanitization. An attacker could manipulate the `req.url` to redirect users to an arbitrary domain.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Ensure that any input used in redirects is validated against a whitelist of allowed URLs.\n2. **Sanitize Input**: Remove or encode any potentially dangerous characters from the input.\n3. **Use Relative URLs**: Prefer using relative URLs for redirects to avoid redirecting to external sites.\n4. **Implement Security Headers**: Use security headers like `Content-Security-Policy` to restrict the domains that can be loaded.\n\n### Source Code Fix Recommendation\n\nTo mitigate the vulnerability, you can validate the `returnurl` parameter to ensure it only contains safe, expected values. Here's a fixed version of the code:\n\n```javascript\nconst allowedUrls = [\"/home\", \"/dashboard\", \"/profile\"]; // Define allowed return URLs\n\napp.get('/login', (req, res) => {\n    const returnUrl = req.query.returnurl;\n    if (allowedUrls.includes(returnUrl)) {\n        res.redirect(\"/login?returnurl=\" + returnUrl);\n    } else {\n        res.redirect(\"/login?returnurl=/home\"); // Default to a safe URL\n    }\n});\n```\n\n### Library Dependencies\n\nTo execute the code example properly, you need the following library dependencies:\n\n- `express`: A minimal and flexible Node.js web application framework.\n\nYou can install it using npm:\n\n```bash\nnpm install express\n```\n\n### OWASP Resources\n\n- [OWASP Top Ten: A6:2017-Security Misconfiguration](https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration)\n- [OWASP Cheat Sheet: Input Validation](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-601: URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.express_open_redirect"
                ]
              }
            },
            {
              "id": "glog-fa3efa3d-b761-4d48-a6d3-1fe787c34451",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"XSS Vulnerability from User-Controlled HTML Data\" occurs when an application includes untrusted data in a web page without proper validation or escaping, allowing attackers to execute malicious scripts in the context of a user's browser. In JavaScript, this often happens when user input is directly inserted into HTML or JavaScript code without proper sanitization.\n\nIn the provided code snippet, the `res.redirect(\"/login?returnurl=\" + req.url);` line is vulnerable to XSS if `req.url` contains malicious scripts. An attacker could craft a URL that includes a script, which would then be executed when the redirect occurs.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Ensure that all user inputs are validated against a whitelist of acceptable values.\n2. **Escape Output**: Properly escape all untrusted data before including it in HTML or JavaScript contexts.\n3. **Use Security Libraries**: Utilize libraries that automatically handle escaping and validation.\n4. **Content Security Policy (CSP)**: Implement CSP headers to restrict the sources from which scripts can be loaded.\n\n### Source Code Fix Recommendation\n\nTo mitigate the vulnerability in the specific code snippet, use a library like `encodeURIComponent` to safely encode the URL parameter:\n\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/login', (req, res) => {\n    const safeReturnUrl = encodeURIComponent(req.url);\n    res.redirect(\"/login?returnurl=\" + safeReturnUrl);\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});\n```\n\n### Library Dependencies\n\nTo execute the code example properly, the following library dependencies are required:\n\n- `express`: A web application framework for Node.js.\n\nYou can install the required dependency using npm:\n\n```bash\nnpm install express\n```\n\n### OWASP Resources\n\n- [OWASP Cross Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-4ef01635-efdc-44db-9205-8c18a35fa2d7",
              "help": {
                "text": "",
                "markdown": "### Description\n\nA \"Deprecation Vulnerability\" in JavaScript arises when code relies on deprecated features or APIs that are no longer supported or maintained. This can lead to security risks, as deprecated features may not receive security updates, leaving applications vulnerable to exploitation. Additionally, deprecated features may be removed in future versions, leading to broken functionality.\n\n### General Mitigation Advice\n\n1. **Stay Updated**: Regularly update your JavaScript environment and libraries to the latest versions to ensure deprecated features are replaced with supported alternatives.\n2. **Code Review**: Conduct regular code reviews to identify and replace deprecated features.\n3. **Use Linters**: Employ tools like ESLint to detect deprecated features in your codebase.\n4. **Consult Documentation**: Regularly check the official documentation for updates on deprecated features and recommended alternatives.\n\n### Source Code Fix Recommendation\n\nSuppose you have a piece of code using the deprecated `escape()` function, which is no longer recommended for use in modern JavaScript:\n\n```javascript\n// Deprecated code\nlet url = \"https://example.com/?search=\" + escape(\"query with spaces\");\n```\n\n**Fix**: Replace `escape()` with `encodeURIComponent()`, which is the modern and recommended approach:\n\n```javascript\n// Updated code\nlet url = \"https://example.com/?search=\" + encodeURIComponent(\"query with spaces\");\n```\n\n### Library Dependencies\n\nThe code example provided does not require any external library dependencies to execute properly.\n\n### Relevant OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-477: Use of Obsolete Function](https://cwe.mitre.org/data/definitions/477.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.maintainer-is-deprecated"
                ]
              }
            },
            {
              "id": "glog-c62a2808-e924-487c-a17b-8f7084639f76",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Insecure File Inclusion via URL in ADD Command\" vulnerability occurs when a Dockerfile's `ADD` command is used to include files from a URL without proper validation or sanitization. This can lead to the inclusion of malicious files, potentially compromising the security of the application. In JavaScript applications, this vulnerability can be particularly dangerous if the included files are executed or processed in a way that allows for code execution or data manipulation.\n\n### General Mitigation Advice\n\n1. **Use COPY Instead of ADD**: Prefer using the `COPY` command over `ADD` when you do not need the additional features of `ADD`, such as extracting tar files or downloading files from URLs.\n\n2. **Validate and Sanitize URLs**: If you must use URLs, ensure they are from trusted sources and validate them rigorously.\n\n3. **Use Checksums**: Verify the integrity of the files by using checksums. This ensures that the files have not been tampered with.\n\n4. **Limit Network Access**: Restrict network access to only trusted domains and use network policies to prevent unauthorized access.\n\n5. **Regularly Update Dependencies**: Keep all dependencies up to date to mitigate known vulnerabilities.\n\n### Source Code Fix Recommendation\n\nReplace the `ADD` command with `COPY` if you are adding local files. If you must use `ADD` for remote files, ensure you validate the URL and verify the file integrity.\n\n```dockerfile\n# Original vulnerable command\n# ADD init.sql /docker-entrypoint-initdb.d/\n\n# Recommended secure command\nCOPY init.sql /docker-entrypoint-initdb.d/\n```\n\n### Library Dependencies\n\nFor the Dockerfile example provided, there are no specific JavaScript library dependencies required to execute the `COPY` command. However, ensure that your Docker environment is properly set up and that any application-specific dependencies are managed within your application code.\n\n### Relevant OWASP Resources\n\n- [OWASP Docker Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html)\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-829: Inclusion of Functionality from Untrusted Control Sphere](https://cwe.mitre.org/data/definitions/829.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.prefer-copy-over-add"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-56cf459b-01a0-483b-a1b9-8a62255e5361",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Package Cache Retention Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 19,
                  "snippet": {
                    "text": "RUN apt-get update && apt-get install -y netcat"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5e22b0c34e83bf79efa9a77031a36d3f350db625eaac83de6e71bc37803aa1178b1d4c305de33eb4d35b4632b149df8f8293c20e4be74a38aa8ed5dc74d88919_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-65afe775-722c-47a1-8ba7-2f9c9cce00b0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Missing '--no-install-recommends' in 'apt-get install' command."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 41,
                  "snippet": {
                    "text": "RUN apt-get update && apt-get install -y netcat"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bd50916a766c8b20b5357c601691b0ae1723429f5d22b3a8d6c14f7a919535cb5ed5e4c9c7f96ad16e9f359697f855bac18886068fc7cc9975d20890d61e6ac4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-ada52539-b8ab-4284-8c4f-395a762e99b8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Image Size Increase Due to Retained Package Lists"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 19,
                  "snippet": {
                    "text": "RUN apt-get update && apt-get install -y netcat"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "282ecb7e02272dbc15358ec2240125c566253f141a2fb5d4a2745b1b02e46a3cac2b39e3c05f47e63c47e55398d35900b383df1477d0c5757dbd525ab55bdf65_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-ad4f9975-7d52-46b3-8617-a399126a9d2f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Container Privilege Escalation Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CMD [ \"npm\", \"start\" ]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3794a54b1614a690ab3cd50a1d77f317271593f0eaa6490e873f3c5f2dacc69139826109e0a28aa0e17f29a4d3c1151b15a30b9bd7b0d3b3f9d9adb34e93b7f5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-e8b0c584-d0ae-4df9-ae9b-8c51da5e14a4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Sensitive Information Exposure Detected"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 3,
                  "endLine": 44,
                  "endColumn": 57,
                  "snippet": {
                    "text": "  secret: 'asddfilhpaf78h78032h780g780fg780asg780dsbovncubuyvqy',"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c7fa67622efb9ad359c519892f06c61dfbd14051b193ee634a7acd4974397f18a0683e354991aa710269873725273cf613eb98448b8110a7d3290f477a932f0a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-8fd24791-20a3-4328-94ff-f3b101088356",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Container Privilege Escalation Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CMD [ \"npm\", \"start\" ]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b6044864221464567038bfcbc7d4738a0deaafa61a6d18f719f3c1b93ac792ff0fcc54a7fe9d1fc8da8f2c830dbccb23528b50acca3804de4cf34e5cf17cfa48_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-bc3fbe47-ba10-43bb-a0d7-a66f96747e33",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Credential Exposure in URI"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "config.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 20,
                  "endLine": 4,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        \"server\": \"postgres://postgres:postgres@127.0.0.1\","
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "03721492aaf21c955a5f4b9e3d59fcc008c9c5fc423c42372e626f95a7d442853bbb47b5562f8fb99fe3c429f25890dd41eda72d8bf0186e49a04a6dc16ba2f7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-6ad068e1-db66-41b0-9371-dfda73db633a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Sensitive Information Exposure Detected"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 3,
                  "endLine": 44,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  secret: 'asddfilhpaf78h78032h780g780fg780asg780dsbovncubuyvqy',"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "39c09400d1093cda9964160c303d84700d160c268ad56944ecdfed90526b847f154d5b66f58dc96a7fef5a0a2313f74ca7188929e704c5f30865c49bdf86cffa_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-13c3447a-9edd-4d19-9def-0023a20ff4c2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Cryptographically Weak RNG Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dummy.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 25,
                  "endLine": 26,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      \"price\": parseInt(Math.random() * 100),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "06ee3d0b59f9f003577fa95e0fc956c21179c0e453058420cfeec7b76874b95622b4cbc5597f611f5940e817adaf63984f80bf81dc57e040d49da4467a9b84d0_1"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-657e8ae5-e06a-4957-ab83-5e5acce14478",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Cryptographically Weak RNG Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dummy.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      \"price\": parseInt(Math.random() * 100),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "06ee3d0b59f9f003577fa95e0fc956c21179c0e453058420cfeec7b76874b95622b4cbc5597f611f5940e817adaf63984f80bf81dc57e040d49da4467a9b84d0_2"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-b9ba5aff-d846-4e5d-83cc-5d0f5a26db35",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Credential Exposure in URI"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "config.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 20,
                  "endLine": 12,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        \"server\": \"postgres://postgres:postgres@10.211.55.70\","
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "03721492aaf21c955a5f4b9e3d59fcc008c9c5fc423c42372e626f95a7d442853bbb47b5562f8fb99fe3c429f25890dd41eda72d8bf0186e49a04a6dc16ba2f7_1"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-fdcc1b77-15eb-49fb-951f-e33692ced627",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Cryptographically Weak RNG Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dummy.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 25,
                  "endLine": 20,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      \"price\": parseInt(Math.random() * 100),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "06ee3d0b59f9f003577fa95e0fc956c21179c0e453058420cfeec7b76874b95622b4cbc5597f611f5940e817adaf63984f80bf81dc57e040d49da4467a9b84d0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-736afa53-c4cf-41c4-9b70-7548e01abea7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Cryptographically Weak RNG Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dummy.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 25,
                  "endLine": 50,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      \"price\": parseInt(Math.random() * 100),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "06ee3d0b59f9f003577fa95e0fc956c21179c0e453058420cfeec7b76874b95622b4cbc5597f611f5940e817adaf63984f80bf81dc57e040d49da4467a9b84d0_3"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-416fbc1a-df15-4c91-9f9e-28ceccfb9a0c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Cryptographically Weak RNG Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dummy.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 25,
                  "endLine": 62,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      \"price\": parseInt(Math.random() * 100),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "06ee3d0b59f9f003577fa95e0fc956c21179c0e453058420cfeec7b76874b95622b4cbc5597f611f5940e817adaf63984f80bf81dc57e040d49da4467a9b84d0_5"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-118fadec-3ca8-4cf3-8768-023e990d0ba8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Cryptographically Weak RNG Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dummy.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 25,
                  "endLine": 56,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      \"price\": parseInt(Math.random() * 100),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "06ee3d0b59f9f003577fa95e0fc956c21179c0e453058420cfeec7b76874b95622b4cbc5597f611f5940e817adaf63984f80bf81dc57e040d49da4467a9b84d0_4"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-cf504862-aaec-40ff-8c2d-6b4a3c639b38",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS vulnerability from user-controlled HTML data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model/auth.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 5,
                  "endLine": 7,
                  "endColumn": 100,
                  "snippet": {
                    "text": "    var q = \"SELECT * FROM users WHERE name = '\" + username + \"' AND password ='\" + password + \"';\";"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e2dd253326dd957d6848535d2487cbc38795602aa914421d96b711971a339f518d52d1240e60c35f823a4371fcc7e040aafca3ca54bcd010373abd82393cd796_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-5d984683-172a-44b0-90eb-826e413e067e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS Vulnerability from User-Controlled HTML Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model/products.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 5,
                  "endLine": 14,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    var q = \"SELECT * FROM products WHERE id = '\" + product_id + \"';\";"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7ac7769f2d7bb5db6b2a472d69386375559b37d14c4857d4f0984cb3ea5d8864a8f6468bf4d638fdd92ce66319f2094c0014e386dd100200ba2c4335a7dd5e4a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-f54fb671-f70e-4c66-a428-3c55cc837776",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS vulnerability from user-controlled HTML data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model/products.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 5,
                  "endLine": 21,
                  "endColumn": 112,
                  "snippet": {
                    "text": "    var q = \"SELECT * FROM products WHERE name ILIKE '%\" + query + \"%' OR description ILIKE '%\" + query + \"%';\";"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8e1b2b0b1ca72259fb6c6dae927eaafdb67f3509f4f73d2fb4a7cdbc6d9807c653f5faebe6f764fbfc60917ad483d5a9fe365924ff226dbfff2241d691edbdd1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-b7c23f52-066c-4b71-81d1-73e39c68ace5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS Vulnerability from User-Controlled HTML Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model/products.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 5,
                  "endLine": 38,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    var q = \"INSERT INTO purchases(mail, product_name, user_name, product_id, address, phone, ship_date, price) VALUES('\" +\n            cart.mail + \"', '\" +\n            cart.product_name + \"', '\" +\n            cart.username + \"', '\" +\n            cart.product_id + \"', '\" +\n            cart.address + \"', '\" +\n            cart.ship_date + \"', '\" +\n            cart.phone + \"', '\" +\n            cart.price +\n            \"');\";"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1ec23ecbf1dad849cae3cdd30cff8f34501b8c0252dfcefb4e8f2ba67bbf56a907767568e3e8f4c720740d9b1900b50736714114dc432a7595eaf925b3f78506_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-fb9ba6e7-6937-4310-ba39-8d9fffa09ab7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS vulnerability from user-controlled HTML data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model/products.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 5,
                  "endLine": 46,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    var q = \"SELECT * FROM purchases WHERE user_name = '\" + username + \"';\";"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e0bcbe63c4516f6f7354959e9923c114686a9b8fec456c3fba3f70064dc2369f875a716ecc7c857b0c60fd7664fab2f06543a033d8c362a99cae1a7f86dcc5f1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-a8dbc748-e11e-4d00-9079-3ee9dc721de5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Open Redirect Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/login.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 5,
                  "endLine": 40,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    var returnurl = req.body.returnurl;\n\n    logger.error(\"Tried to login attempt from user = \" + user);\n\n    auth(user, password)\n        .then(function (data) {\n            req.session.logged = true;\n            req.session.user_name = user;\n\n            if (returnurl == undefined || returnurl == \"\"){\n                returnurl = \"/\";\n            }\n\n            res.redirect(returnurl);\n        })\n        .catch(function (err) {\n            res.redirect(\"/login?returnurl=\" + returnurl + \"&error=\" + err.message);\n        });"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ff104587e1e5b619b6a33b16aa91a1171785a7931e7698e217d02d7d1860b640635708fe1428eaf495a670923f8876a2ea4e72749e0bf3e3486a3727698968e1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-9dfc4027-7dce-4da8-9b7c-17188bde2b17",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Open Redirect Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/login.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 26,
                  "endLine": 36,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            res.redirect(returnurl);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f6e39dbe8952b7ff29b0db767a90d0d468c97bbd8c90f91f3ef41faaf8417103fe4998fd988350fc73a852585ec3aea7979eeffbb82424fd9b2325b051dc8d12_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-9fcf275f-1ab3-41f5-8921-9fa74c42a738",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Open Redirect Vulnerability in redirect() Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/login_check.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 9,
                  "endLine": 6,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        res.redirect(\"/login?returnurl=\" + req.url);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "21295a1300f92b87827661a696ee4956f736d692e41b7bdb9f57aac9b016cd037a704f59545a1a5b4ce2ff1b60a477c31cc3110e2472bf729f06ea201f97972b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-fa3efa3d-b761-4d48-a6d3-1fe787c34451",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS Vulnerability from User-Controlled HTML Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/login_check.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 9,
                  "endLine": 6,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        res.redirect(\"/login?returnurl=\" + req.url);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2e323d6f4827d0cf3387e49b0aba10a65b8d70a51b537742259696f60f35ecfbdf27a5e24cc4eafabce865e2f44b352ba013c76f0790115fd31a6f77a91380d3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-4ef01635-efdc-44db-9205-8c18a35fa2d7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Deprecation Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "services/postgresql/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 11,
                  "snippet": {
                    "text": "MAINTAINER \"Daniel Garcia aka (cr0hn)\" <cr0hn@cr0hn.com>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e2d5f93d21f2431a74319428d0fe40554af955682fa9270ba8bd3540ca46f2ff1467d46f5e2c2da746f68bd7f18fc6b079a9ebf2bed3f435ffb2d4c847856cf7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-c62a2808-e924-487c-a17b-8f7084639f76",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Insecure File Inclusion via URL in ADD Command"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "services/postgresql/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ADD init.sql /docker-entrypoint-initdb.d/"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ba5554824e90804911f3261996b1051d7c4e4859ce6fb20f7ab745c8b883a6155aa7068c250eed6a9619b77908dfcd8ff0a1cf471c7f7ee4f91b5ce4f3081401_0"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}